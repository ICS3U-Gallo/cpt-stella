import os
from pyglet.window.key import KeyStateHandler
import arcade

file_path = os.path.dirname(os.path.abspath(__file__))
os.chdir(file_path)

WIDTH = 800
HEIGHT = 450

# Keys Pressed
keys_pressed = KeyStateHandler()


# Screens
current_screen = "menu"
game_screen = "game screen 1"

# Player Lives
heart_x = 20
heart_y = HEIGHT - 15
heart_list = arcade.SpriteList()

# Player
player_x = 30
player_y = 210
player_width = 5
player_height = 10
player_speedx = 5
player_speedy = 25

# Ground
ground_rect_x1 = 0
ground_rect_y1 = 0
ground_rect_width1 = WIDTH
ground_rect_height1 = 200

# Walls


# Platforms


# Spikes
spike1_x1 = 255
spike1_x2 = 520
spike_list = arcade.SpriteList()

# Gravity
gravity = 17
on_ground = True


def update(delta_time):
    global player_x, player_y, player_speedy, player_speedx, player
    global current_screen
    global up_pressed, right_pressed, left_pressed
    global gravity, on_ground

    # Moving Between Screens
    if current_screen == "menu":
        if keys_pressed[arcade.key.P]:
            current_screen = "game"
        elif keys_pressed[arcade.key.I]:
            current_screen = "instructions"
        elif keys_pressed[arcade.key.ESCAPE]:
            exit()
    elif current_screen == "instructions":
        if keys_pressed[arcade.key.BACKSPACE]:
            current_screen = "menu"
    elif current_screen == "game":
        if keys_pressed[arcade.key.BACKSPACE]:
            current_screen = "menu"
        elif keys_pressed[arcade.key.ESCAPE]:
            exit()

    # Player Movement
    if current_screen == "game":


        if keys_pressed[arcade.key.UP]:
            player_y += player_speedy
        elif keys_pressed[arcade.key.DOWN]:
            player_y -= player_speedy

        if keys_pressed[arcade.key.RIGHT]:
            player_x += player_speedx
        elif keys_pressed[arcade.key.LEFT]:
            player_x -= player_speedx


def on_draw():
    arcade.start_render()
    global heart_list
    global game_screen

    if current_screen == "menu":
        menu()
    elif current_screen == "instructions":
        instructions()
    elif current_screen == "game":
        for heart_x in range(15, 200, 20):
            heart = arcade.Sprite('Sprites/Heart.png', center_x=heart_x, center_y=heart_y, scale=0.07)
            heart_list.append(heart)
        heart_list.draw()
        if game_screen == "game screen 1":
            game_screen1()
        elif game_screen == "game screen 2":
            game_screen2()
        elif game_screen == "game screen 3":
            game_screen3()




def on_mouse_press(x, y, button, modifiers):
    pass


def setup():
    arcade.open_window(WIDTH, HEIGHT, "A Hard Game")
    arcade.set_background_color(arcade.color.WHITE)
    arcade.schedule(update, 1/60)

    # Override arcade window methods
    window = arcade.get_window()
    window.on_draw = on_draw
    window.push_handlers(keys_pressed)

    # window.on_key_press = on_key_press
    # window.on_key_release = on_key_release
    # window.on_mouse_press = on_mouse_press

    arcade.run()

def menu():
    arcade.set_background_color(arcade.color.BLACK)
    arcade.draw_text("A Hard Game", WIDTH/2, HEIGHT/2 + 50, arcade.color.WHEAT,
                     font_size=30, bold=True, anchor_x="center")
    arcade.draw_text("P to Play", WIDTH/2, HEIGHT/2 - 10, arcade.color.WHITE,
                     font_size=25, bold=True, anchor_x="center")
    arcade.draw_text("I for Instructions", WIDTH/2, HEIGHT/2 - 50, arcade.color.WHITE,
                     font_size=25, bold=True, anchor_x="center")
    arcade.draw_text("ESC to End Game", WIDTH/2, HEIGHT/2 - 90, arcade.color.WHITE,
                     font_size=25, bold=True, anchor_x="center")

def instructions():
    arcade.set_background_color(arcade.color.BLACK)
    arcade.draw_text("How To Play", WIDTH/2, HEIGHT - 100, arcade.color.WHITE,
                     font_size=30, bold= True, anchor_x="center")
    arcade.draw_text("""Your goal is to make it to the end without losing all your lives by 
avoiding the spikes and pitfalls.

Use the Left and Right arrow keys to move, and Up arrow key to jump.

To end the game and return to menu, press the BACKSPACE button.
To exit the game, press the ESC button.""",
                     WIDTH/2, HEIGHT/2, arcade.color.WHITE, font_size=15, anchor_x="center")



def game_screen1():
    global current_screen, game_screen
    global player_x, player_y, player_width, player_height, heart_list
    global on_ground
    global spike1_x1, spike1_x2, spike, spike_list
    global player, collisions

    arcade.set_background_color(arcade.color.WHITE_SMOKE)

    # Player
    player = arcade.Sprite('Sprites/Player.Face-Right.png', center_x=player_x, center_y=player_y, scale=0.1)
    player.draw()

    # Player Lives
    # for heart_x in range(15, 215, 20):
    #     heart = arcade.Sprite('Sprites/Heart.png', center_x=heart_x, center_y=heart_y, scale=0.07)
    #     heart_list.append(heart)
    # heart_list.draw()

    # Ground
    arcade.draw_xywh_rectangle_filled(ground_rect_x1, ground_rect_y1,
                                      ground_rect_width1, ground_rect_height1,
                                      arcade.color.DARK_BROWN)

    # Spikes
    if player_x >= 200:
        for spike1_x1 in range(255, 300, 33):
            spike = arcade.Sprite('Sprites/Spike.png', center_x=spike1_x1, center_y=218, scale=0.09)
            spike_list.append(spike)
            spike.draw()

    spike = arcade.Sprite('Sprites/Spike.png', center_x=spike1_x2, center_y=218, scale=0.09)
    spike_list.append(spike)
    spike.draw()


    # Collision between Player and Spikes
    collisions = arcade.check_for_collision_with_list(player, spike_list)

    for collision in collisions:
        player_x = 30


    # Next screen
    if game_screen == "game screen 1" and player_x >= 750:
        game_screen = "game screen 2"

def game_screen2():
    global current_screen
    global player_x, player_y, player_width, player_height
    global on_ground

    arcade.set_background_color(arcade.color.WHITE_SMOKE)

    player_x = 30

    # Player
    player = arcade.Sprite('Sprites/Player.Face-Right.png', center_x=player_x, center_y=player_y, scale=0.1)
    player.draw()

    # Ground
    arcade.draw_xywh_rectangle_filled(0, 0, 220, 200, arcade.color.DARK_BROWN)
    arcade.draw_xywh_rectangle_filled(0, 300, 220, HEIGHT, arcade.color.DARK_BROWN)
    arcade.draw_xywh_rectangle_filled(650, 0, 150, 350, arcade.color.DARK_BROWN)

    # Platforms
    arcade.draw_xywh_rectangle_filled(280, 230, 50, 20, arcade.color.DARK_BROWN)
    arcade.draw_xywh_rectangle_filled(390, 280, 50, 20, arcade.color.DARK_BROWN)
    arcade.draw_xywh_rectangle_filled(500, 330, 50, 20, arcade.color.DARK_BROWN)

    # Spikes

    # Next screen
    if player_x >= 750:
        game_screen3()

def game_screen3():
    pass



if __name__ == '__main__':
    setup()
