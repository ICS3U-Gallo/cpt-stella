import os
from pyglet.window.key import KeyStateHandler
import arcade

file_path = os.path.dirname(os.path.abspath(__file__))
os.chdir(file_path)

WIDTH = 800
HEIGHT = 450

# Keys Pressed
keys_pressed = KeyStateHandler()

# Screens
current_screen = "menu"
game_screen = "game screen 1"

# Player Lives
heart = arcade.Sprite('Sprites/Heart.png', center_x=20,
                      center_y=HEIGHT - 15, scale=0.07)
heart_list = arcade.SpriteList()

# Player
player_speedx = 8
player_speedy = 25
player = arcade.Sprite('Sprites/Player.Face-Right.png', center_x=30,
                       center_y=220, scale=0.1)

# Gravity
player.change_y = 3
on_ground = True

# Ground
ground = arcade.Sprite('Sprites/Ground.png', center_x=15,
                       center_y=185, scale=0.5)
ground2 = arcade.Sprite('Sprites/Ground.png', center_x=665,
                       center_y=335, scale=0.5)

ground_list = arcade.SpriteList()

# Dirt
dirt = arcade.Sprite('Sprites/Dirt.png', center_x=15,
                     center_y=185, scale=0.5)
dirt2 = arcade.Sprite('Sprites/Dirt.png', center_x=665,
                      center_y=16, scale=0.5)

# Walls


# Platforms
platform = arcade.Sprite('Sprites/Ground.png', center_x=280,
                         center_y=230, scale=0.4)
platform2 = arcade.Sprite('Sprites/Ground.png', center_x=403,
                          center_y=287, scale=0.4)
platform3 = arcade.Sprite('Sprites/Ground.png', center_x=513,
                          center_y=337, scale=0.4)
platform_list = arcade.SpriteList()

# Spikes
spike = arcade.Sprite('Sprites/Spike.png', center_x=255,
                      center_y=218, scale=0.09)
spike2 = arcade.Sprite('Sprites/Spike.png', center_x=520,
                      center_y=218, scale=0.09)
spike3 = arcade.Sprite('Sprites/Spike.png', center_x=238,
                      center_y=18, scale=0.09)
spike_list = arcade.SpriteList()


def update(delta_time):
    global player_speedy, player_speedx, player
    global current_screen
    global up_pressed, right_pressed, left_pressed
    global on_ground

    # Moving Between Screens
    if current_screen == "menu":
        if keys_pressed[arcade.key.P]:
            current_screen = "game"
        elif keys_pressed[arcade.key.I]:
            current_screen = "instructions"
        elif keys_pressed[arcade.key.ESCAPE]:
            exit()
    elif current_screen == "instructions":
        if keys_pressed[arcade.key.BACKSPACE]:
            current_screen = "menu"
    elif current_screen == "game":
        if keys_pressed[arcade.key.BACKSPACE]:
            current_screen = "menu"
        elif keys_pressed[arcade.key.ESCAPE]:
            exit()

    # Player Movement
    if current_screen == "game":

        player.center_y -= player.change_y
        if player.center_y <= ground.center_y + 30:
            player.change_y = 0
            on_ground = True
        else:
            on_ground = False

        if keys_pressed[arcade.key.UP] and on_ground == True:
            player.change_y = 40
            player.center_y += player.change_y

        if keys_pressed[arcade.key.RIGHT]:
            player.center_x += player_speedx
        elif keys_pressed[arcade.key.LEFT]:
            player.center_x -= player_speedx


def on_draw():
    arcade.start_render()
    global player
    global game_screen

    if current_screen == "menu":
        menu()
    elif current_screen == "instructions":
        instructions()
    elif current_screen == "game":
        player.draw()

        if game_screen == "game screen 1":
            game_screen1()
        elif game_screen == "game screen 2":
            game_screen2()
        elif game_screen == "game screen 3":
            game_screen3()


def on_mouse_press(x, y, button, modifiers):
    pass


def setup():
    arcade.open_window(WIDTH, HEIGHT, "A Hard Game")
    arcade.set_background_color(arcade.color.WHITE)
    arcade.schedule(update, 1/60)

    # Override arcade window methods
    window = arcade.get_window()
    window.on_draw = on_draw
    window.push_handlers(keys_pressed)

    # window.on_key_press = on_key_press
    # window.on_key_release = on_key_release
    # window.on_mouse_press = on_mouse_press

    arcade.run()


def menu():
    arcade.set_background_color(arcade.color.BLACK)
    arcade.draw_text("A Hard Game",
                     WIDTH/2, HEIGHT/2 + 50, arcade.color.WHEAT,
                     font_size=30, bold=True, anchor_x="center")
    arcade.draw_text("P to Play",
                     WIDTH/2, HEIGHT/2 - 10, arcade.color.WHITE,
                     font_size=25, bold=True, anchor_x="center")
    arcade.draw_text("I for Instructions",
                     WIDTH/2, HEIGHT/2 - 50, arcade.color.WHITE,
                     font_size=25, bold=True, anchor_x="center")
    arcade.draw_text("ESC to End Game",
                     WIDTH/2, HEIGHT/2 - 90, arcade.color.WHITE,
                     font_size=25, bold=True, anchor_x="center")


def instructions():
    arcade.set_background_color(arcade.color.BLACK)
    arcade.draw_text("How To Play",
                     WIDTH/2, HEIGHT - 100, arcade.color.WHITE,
                     font_size=30, bold=True, anchor_x="center")
    arcade.draw_text("""Your goal is to make it to the end without losing all your lives by
avoiding the spikes and pitfalls.

Use the Left and Right arrow keys to move, and Up arrow key to jump.

To end the game and return to menu, press the BACKSPACE button.
To exit the game, press the ESC button.""",
                     WIDTH/2, HEIGHT/2, arcade.color.WHITE,
                     font_size=15, anchor_x="center")


def game_screen1():
    global current_screen, game_screen
    global player, player_speedy, heart_list
    global ground_list, ground
    global spike_list, spike, spike2

    arcade.set_background_color(arcade.color.WHITE_SMOKE)

    # Player Lives
    for heart.center_x in range(15, 200, 20):
        heart_list.append(heart)
        heart.draw()

    # Ground
    for ground.center_x in range(16, WIDTH, 32):
        ground_list.append(ground)
        ground.draw()

    for dirt.center_x in range(16, WIDTH, 32):
        for dirt.center_y in range(0, 185, 30):
            dirt.draw()

    # Prevent Player from Going through Ground
    landings = arcade.check_for_collision_with_list(player, ground_list)

    for landing in landings:
        player.center_y = 300

    # Spikes
    if player.center_x >= 210:
        for spike.center_x in range(255, 300, 33):
            spike_list.append(spike)
            spike.draw()

    spike_list.append(spike2)
    spike2.draw()

    # Collision between Player and Spikes
    collisions = arcade.check_for_collision_with_list(player, spike_list)

    for collision in collisions:
        player.center_x = 30

    # Next screen
    if game_screen == "game screen 1" and player.center_x >= 750:
        player.center_x = 30
        game_screen = "game screen 2"


def game_screen2():
    global current_screen, game_screen
    global ground, ground2, dirt, dirt2
    global platform, platform2, platform3
    global spike3

    arcade.set_background_color(arcade.color.WHITE_SMOKE)

    # Ground
    for ground.center_x in range(16, 225, 31):
        ground_list.append(ground)
        ground.draw()

    for ground2.center_x in range(666, WIDTH, 31):
        ground_list.append(ground2)
        ground2.draw()

    for dirt.center_x in range(16, 225, 31):
        for dirt.center_y in range(0, 220, 30):
            dirt.draw()

    for dirt.center_x in range(16, 225, 31):
        for dirt.center_y in range(300, HEIGHT, 30):
            dirt.draw()

    for dirt2.center_x in range(666, WIDTH, 31):
        for dirt2.center_y in range(0, 335, 30):
            dirt2.draw()

    # Platforms
    for platform.center_x in range(293, 340, 25):
        platform_list.append(platform)
        platform.draw()

    for platform2.center_x in range(403, 440, 25):
        platform_list.append(platform2)
        platform2.draw()

    for platform3.center_x in range(513, 540, 25):
        platform_list.append(platform3)
        platform3.draw()

    # Prevent Player from going through ground
    landings = arcade.check_for_collision_with_list(player, ground_list)

    for landing in landings:
        player.center_y = 230

    # Spikes
    for spike3.center_x in range(238, 648, 33):
        spike_list.append(spike3)
        spike3.draw()

    # Detect Collisions
    collisions = arcade.check_for_collision_with_list(player, spike_list)

    for collision in collisions:
        player.center_x = 30

    # Player Lives
    for heart.center_x in range(15, 200, 20):
        heart_list.append(heart)
        heart.draw()

    # Next screen
    if game_screen == "game screen 2" and player.center_x >= 750:
        game_screen = game_screen3()


def game_screen3():
    pass


if __name__ == '__main__':
    setup()
