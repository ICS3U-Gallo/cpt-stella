import os
from pyglet.window.key import KeyStateHandler
import random
import arcade

file_path = os.path.dirname(os.path.abspath(__file__))
os.chdir(file_path)

WIDTH = 800
HEIGHT = 450

# Keys Pressed
keys_pressed = KeyStateHandler()

# Screens
current_screen = "menu"
game_screen = "game screen 1"

# Player Lives
# heart_list = arcade.SpriteList()
player_health = 100
player_max_health = 100
bar_width = 200
bar_height = 20

# Player
# player_speedx = 5
player = arcade.Sprite('Sprites/Player.Face-Right.png', center_x=30,
                       center_y=220, scale=0.1)

# Gravity
on_ground = True

# Ground
ground_list = arcade.SpriteList()

# Dirt
dirt_list = arcade.SpriteList()

# Platforms
platform_list = arcade.SpriteList()

# Spikes
spike_list = arcade.SpriteList()

# Goal
goal_list = arcade.SpriteList()


def update(delta_time):
    global player
    global on_ground
    global current_screen
    global up_pressed, right_pressed, left_pressed

    # Moving Between Screens
    if current_screen == "menu":
        if keys_pressed[arcade.key.P]:
            current_screen = "game"
        elif keys_pressed[arcade.key.I]:
            current_screen = "instructions"
        elif keys_pressed[arcade.key.ESCAPE]:
            exit()
    elif current_screen == "instructions":
        if keys_pressed[arcade.key.BACKSPACE]:
            current_screen = "menu"
    elif current_screen == "game":
        if keys_pressed[arcade.key.BACKSPACE]:
            current_screen = "menu"
        elif keys_pressed[arcade.key.ESCAPE]:
            exit()
    elif current_screen == "game over" or current_screen == "win":
        if keys_pressed[arcade.key.M]:
            current_screen = "menu"

    # Player Movement
    if current_screen == "game":

        player.change_x = 5
        player.change_y -= 1
        player.center_y += player.change_y

        check_for_ground()

        if keys_pressed[arcade.key.UP] and on_ground is True:
            player.change_y = 13

        if keys_pressed[arcade.key.RIGHT]:
            player.center_x += player.change_x
        elif keys_pressed[arcade.key.LEFT]:
            player.center_x -= player.change_x

        # Falling Spikes
        if game_screen == "game screen 3":
            for spike in spike_list:
                spike.center_y -= 5

                if spike.center_y < 150:
                    spike.center_y = 460
                    spike.center_x = random.randrange(140, 680)


def on_draw():
    arcade.start_render()
    global player
    global game_screen, current_screen

    if current_screen == "menu":
        menu()
    elif current_screen == "instructions":
        instructions()
    elif current_screen == "game over":
        game_over()
    elif current_screen == "win":
        win()
    elif current_screen == "game":
        if game_screen == "game screen 1":
            game_screen1()
        elif game_screen == "game screen 2":
            game_screen2()
        elif game_screen == "game screen 3":
            game_screen3()

        if player_health == 0:
            current_screen = "game over"

        player.draw()
        # Draw Health Bar
        health_width = player_health / player_max_health * bar_width

        arcade.draw_xywh_rectangle_filled(15, HEIGHT - 30,
                                          bar_width, bar_height,
                                          arcade.color.BLACK)
        arcade.draw_xywh_rectangle_filled(15, HEIGHT - 30,
                                          health_width, bar_height,
                                          arcade.color.BOTTLE_GREEN)
        arcade.draw_text(f"{player_health}/{player_max_health}",
                         20, HEIGHT - 30, arcade.color.WHITE,
                         bold=True, font_size=10)


def setup():
    arcade.open_window(WIDTH, HEIGHT, "A Hard Game")
    arcade.set_background_color(arcade.color.WHITE)
    arcade.schedule(update, 1/60)

    # Override arcade window methods
    window = arcade.get_window()
    window.on_draw = on_draw
    window.push_handlers(keys_pressed)

    # window.on_key_press = on_key_press
    # window.on_key_release = on_key_release
    # window.on_mouse_press = on_mouse_press

    setup_gamescreen1()

    arcade.run()


def setup_gamescreen1():
    # Create Hearts (Player Lives)
    # for center_x in range(15, 200, 20):
    #     heart = arcade.Sprite('Sprites/Heart.png', center_x=center_x,
    #                           center_y=HEIGHT - 15, scale=0.07)
    #     heart_list.append(heart)

    # create ground
    for center_x in range(15, WIDTH-15, 32):
        ground = arcade.Sprite('Sprites/Ground.png', center_x=center_x,
                               center_y=185, scale=0.5)
        ground_list.append(ground)

    # create dirt
    for center_x in range(15, WIDTH - 15, 32):
        for center_y in range(170, 0, -32):
            dirt = arcade.Sprite('Sprites/Dirt.png', center_x=center_x,
                                 center_y=center_y, scale=0.5)
            dirt_list.append(dirt)

    # Create Spikes
    spike = arcade.Sprite('Sprites/Spike.png', center_x=255,
                          center_y=218, scale=0.09)
    spike_list.append(spike)

    spike2 = arcade.Sprite('Sprites/Spike.png', center_x=520,
                           center_y=218, scale=0.09)
    spike_list.append(spike2)


def setup_gamescreen2():
    global ground_list, dirt_list, spike_list

    ground_list = arcade.SpriteList()
    dirt_list = arcade.SpriteList()
    spike_list = arcade.SpriteList()

    # Create Ground
    for center_x in range(15, 225, 32):
        ground = arcade.Sprite('Sprites/Ground.png', center_x=center_x,
                               center_y=185, scale=0.5)
        ground_list.append(ground)

    for center_x in range(665, WIDTH, 32):
        ground2 = arcade.Sprite('Sprites/Ground.png', center_x=center_x,
                                center_y=335, scale=0.5)
        ground_list.append(ground2)

    # Create Dirt
    for center_x in range(15, 225, 32):
        for center_y in range(0, 200, 30):
            dirt = arcade.Sprite('Sprites/Dirt.png', center_x=center_x,
                                 center_y=center_y, scale=0.5)
            dirt_list.append(dirt)
        for center_y in range(300, HEIGHT + 30, 30):
            dirt = arcade.Sprite('Sprites/Dirt.png', center_x=center_x,
                                 center_y=center_y, scale=0.5)
            dirt_list.append(dirt)

    for center_x in range(665, WIDTH, 32):
        for center_y in range(0, 335, 30):
            dirt2 = arcade.Sprite('Sprites/Dirt.png', center_x=center_x,
                                  center_y=center_y, scale=0.5)
            dirt_list.append(dirt2)

    # Create Platforms
    for center_x in range(293, 340, 25):
        platform = arcade.Sprite('Sprites/Ground.png', center_x=center_x,
                                 center_y=230, scale=0.4)
        platform_list.append(platform)

    for center_x in range(403, 440, 25):
        platform2 = arcade.Sprite('Sprites/Ground.png', center_x=center_x,
                                  center_y=287, scale=0.4)
        platform_list.append(platform2)

    for center_x in range(513, 540, 25):
        platform3 = arcade.Sprite('Sprites/Ground.png', center_x=center_x,
                                  center_y=337, scale=0.4)
        platform_list.append(platform3)

    # Create Spikes
    for center_x in range(238, 655, 32):
        spike = arcade.Sprite('Sprites/Spike.png', center_x=center_x,
                              center_y=18, scale=0.09)
        spike_list.append(spike)


def setup_gamescreen3():
    global ground_list, dirt_list, spike_list

    ground_list = arcade.SpriteList()
    dirt_list = arcade.SpriteList()
    spike_list = arcade.SpriteList()

    # Create Ground
    for center_x in range(15, 115, 32):
        ground = arcade.Sprite('Sprites/Ground.png', center_x=center_x,
                               center_y=335, scale=0.5)
        ground_list.append(ground)

    for center_x in range(130, WIDTH + 32, 32):
        ground = arcade.Sprite('Sprites/Ground.png', center_x=center_x,
                               center_y=135, scale=0.5)
        ground_list.append(ground)

    # Create Dirt
    for center_x in range(15, 115, 32):
        for center_y in range(0, 330, 32):
            dirt = arcade.Sprite('Sprites/Dirt.png', center_x=center_x,
                                 center_y=center_y, scale=0.5)
            dirt_list.append(dirt)

    for center_x in range(130, WIDTH + 32, 32):
        for center_y in range(15, 135, 32):
            dirt = arcade.Sprite('Sprites/Dirt.png', center_x=center_x,
                                 center_y=center_y, scale=0.5)
            dirt_list.append(dirt)

    # Spikes
    for i in range(12):
        spike = arcade.Sprite('Sprites/Spike2.png',
                              center_x=random.randrange(160, 680),
                              center_y=random.randrange
                              (HEIGHT + 10, HEIGHT + 300),
                              scale=0.09)
        spike_list.append(spike)

    # Goal
    goal = arcade.Sprite('Sprites/Treasure-Chest.png',
                         center_x=750, center_y=160, scale=0.09)
    goal_list.append(goal)


def check_for_ground():
    global on_ground

    if game_screen == "game screen 1":
        # Prevent player from falling through ground
        if player.center_y <= 215:
            player.change_y = 0
            player.center_y = 215
            on_ground = True
        else:
            on_ground = False
        # Prevent player from going off screen
        if player.center_x < 15:
            player.change_x = 0
            player.center_x = 15

    if game_screen == "game screen 2":
        # Prevent player from falling through ground/platform
        # Ground on Left Side
        if player.center_x <= 225 and 195 <= player.center_y <= 215:
            player.change_y = 0
            player.center_y = 215
            on_ground = True
        # Platform
        elif 275 <= player.center_x <= 335 and 230 <= player.center_y <= 257:
            player.change_y = 0
            player.center_y = 257
            on_ground = True
        elif 385 <= player.center_x <= 445 and 280 <= player.center_y <= 314:
            player.change_y = 0
            player.center_y = 314
            on_ground = True
        elif 495 <= player.center_x <= 555 and 330 <= player.center_y <= 364:
            player.change_y = 0
            player.center_y = 364
            on_ground = True
        # Ground on Right Side
        elif 650 <= player.center_x <= WIDTH and 350 <= player.center_y <= 364:
            player.change_y = 0
            player.center_y = 364
            on_ground = True
        else:
            on_ground = False

        # Player doesn't move through walls
        if (player.center_y >= 300 or player.center_y <= 185) \
                and player.center_x <= 223:
            player.change_x = 0
            player.center_x = 233
        elif player.center_y <= 350 and player.center_x >= 645:
            player.change_x = 0
            player.center_x = 645

        if player.center_x <= 225 and player.center_y >= 275:
            player.change_y = 0

        # Prevent player from going off screen
        if player.center_x < 15:
            player.change_x = 0
            player.center_x = 15

    if game_screen == "game screen 3":
        if player.center_x <= 125 and 350 <= player.center_y <= 364:
            player.change_y = 0
            player.center_y = 364
            on_ground = True
        elif player.center_x > 125 and 145 <= player.center_y <= 163:
            player.change_y = 0
            player.center_y = 163
            on_ground = True

        if 150 <= player.center_y <= 345 and player.center_x <= 130:
            player.change_x = 0
            player.center_x = 131
        elif player.center_x < 15:
            player.change_x = 0
            player.center_x = 15


def menu():
    arcade.set_background_color(arcade.color.BLACK)
    arcade.draw_text("A Hard Game",
                     WIDTH/2, HEIGHT/2 + 50, arcade.color.WHEAT,
                     font_size=30, bold=True, anchor_x="center")
    arcade.draw_text("P to Play",
                     WIDTH/2, HEIGHT/2 - 10, arcade.color.WHITE,
                     font_size=25, bold=True, anchor_x="center")
    arcade.draw_text("I for Instructions",
                     WIDTH/2, HEIGHT/2 - 50, arcade.color.WHITE,
                     font_size=25, bold=True, anchor_x="center")
    arcade.draw_text("ESC to End Game",
                     WIDTH/2, HEIGHT/2 - 90, arcade.color.WHITE,
                     font_size=25, bold=True, anchor_x="center")


def instructions():
    arcade.set_background_color(arcade.color.BLACK)
    arcade.draw_text("How To Play",
                     WIDTH/2, HEIGHT - 100, arcade.color.WHITE,
                     font_size=30, bold=True, anchor_x="center")
    arcade.draw_text("""Your goal is to make it to the end without losing all your lives by
avoiding the spikes.

Use the Left and Right arrow keys to move, and Up arrow key to jump.

To return to menu, press the BACKSPACE button.
To exit the game, press the ESC button from the menu.""",
                     WIDTH/2, HEIGHT/2, arcade.color.WHITE,
                     font_size=15, anchor_x="center")


def game_over():
    arcade.set_background_color(arcade.color.BLACK)

    arcade.draw_text("GAME OVER",
                     WIDTH/2, HEIGHT/2, arcade.color.WHITE,
                     font_size=50, bold=True, anchor_x="center")
    arcade.draw_text("M to return to menu",
                     WIDTH/2, HEIGHT/2 - 75, arcade.color.WHITE,
                     font_size=20, bold=True, anchor_x="center")


def win():
    arcade.set_background_color(arcade.color.BLACK)

    arcade.draw_text("YOU WIN",
                     WIDTH / 2, HEIGHT / 2, arcade.color.WHITE,
                     font_size=50, bold=True, anchor_x="center")
    arcade.draw_text("M to return to menu",
                     WIDTH/2, HEIGHT/2 - 75, arcade.color.WHITE,
                     font_size=20, bold=True, anchor_x="center")


def game_screen1():
    global current_screen, game_screen
    global player_health

    arcade.set_background_color(arcade.color.WHITE_SMOKE)

    # Player Lives
    # heart_list.draw()

    # Ground and Dirt
    ground_list.draw()
    dirt_list.draw()

    # Spikes
    if player.center_x >= 210:
        spike_list.draw()

    spike_list[-1].draw()

    # Collision between Player and Spikes
    collisions = arcade.check_for_collision_with_list(player, spike_list)

    for collision in collisions:
        player.center_x = 30
        player_health -= 10

    # Next screen
    if game_screen == "game screen 1" and player.center_x >= 750:
        setup_gamescreen2()
        game_screen = "game screen 2"
        player.center_x = 30


def game_screen2():
    global current_screen, game_screen
    global player_health

    arcade.set_background_color(arcade.color.WHITE_SMOKE)

    # Spikes
    spike_list.draw()

    # Ground and Dirt
    ground_list.draw()
    dirt_list.draw()

    # Platforms
    platform_list.draw()

    # Player Lives
    # heart_list.draw()

    # Detect Collisions
    collisions = arcade.check_for_collision_with_list(player, spike_list)

    for collision in collisions:
        player.center_x = 30
        player.center_y = 220
        player_health -= 10
        break

    # Next screen
    if game_screen == "game screen 2" and player.center_x >= 750:
        setup_gamescreen3()
        game_screen = "game screen 3"
        player.center_x = 30


def game_screen3():
    global current_screen, game_screen
    global player_health

    arcade.set_background_color(arcade.color.WHITE_SMOKE)

    # Draw ground
    ground_list.draw()
    dirt_list.draw()

    # Spikes
    spike_list.draw()

    # Detect Collision (player and spikes)
    collisions = arcade.check_for_collision_with_list(player, spike_list)

    for collision in collisions:
        player.center_x = 30
        player.center_y = 360
        player_health -= 10
        break

    # Draw Goal
    goal_list.draw()

    # Detect Collision (player and goal)
    wins = arcade.check_for_collision_with_list(player, goal_list)

    for win in wins:
        current_screen = "win"


if __name__ == '__main__':
    setup()
