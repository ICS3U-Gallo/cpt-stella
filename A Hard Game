from pyglet.window.key import KeyStateHandler
import arcade


WIDTH = 800
HEIGHT = 450


# Keys Pressed
keys_pressed = KeyStateHandler()


# Screens
current_screen = "menu"

# Player
player_x = 30
player_y = 210
player_width = 5
player_height = 10
player_speedx = 3
player_jump = 20

# Ground
ground_rect_x1 = 0
ground_rect_y1 = 0
ground_rect_width1 = WIDTH
ground_rect_height1 = 200

# Walls


# Platforms



# Gravity
gravity = 7
on_ground = True


def update(delta_time):
    global player_x, player_y, player_jump, player_speedx
    global current_screen
    global up_pressed, right_pressed, left_pressed

    # Moving Between Screens
    if current_screen == "menu":
        if keys_pressed[arcade.key.P]:
            current_screen = "game"
        elif keys_pressed[arcade.key.I]:
            current_screen = "instructions"
        elif keys_pressed[arcade.key.ESCAPE]:
            exit()
    elif current_screen == "instructions":
        if keys_pressed[arcade.key.BACKSPACE]:
            current_screen = "menu"
    elif current_screen == "game":
        if keys_pressed[arcade.key.BACKSPACE]:
            current_screen = "menu"

    # Player Movement
    if current_screen == "game":
        if on_ground == True:
            if keys_pressed[arcade.key.UP]:
                player_y += player_jump

        if keys_pressed[arcade.key.RIGHT]:
            player_x += player_speedx
        elif keys_pressed[arcade.key.LEFT]:
            player_x -= player_speedx




def on_draw():
    arcade.start_render()
    # Draw in here...

    if current_screen == "menu":
        menu()
    elif current_screen == "instructions":
        instructions()
    elif current_screen == "game":
        game_screen1()




def on_mouse_press(x, y, button, modifiers):
    pass


def setup():
    arcade.open_window(WIDTH, HEIGHT, "My Arcade Game")
    arcade.set_background_color(arcade.color.WHITE)
    arcade.schedule(update, 1/60)

    # Override arcade window methods
    window = arcade.get_window()
    window.on_draw = on_draw
    window.push_handlers(keys_pressed)

    # window.on_key_press = on_key_press
    # window.on_key_release = on_key_release
    # window.on_mouse_press = on_mouse_press

    arcade.run()

def menu():
    arcade.set_background_color(arcade.color.BLACK)
    arcade.draw_text("A Hard Game", WIDTH/2, HEIGHT/2, arcade.color.WHEAT,
                     font_size=30, bold=True, anchor_x="left")
    arcade.draw_text("P to Play", WIDTH/2, HEIGHT/2 - 50, arcade.color.WHITE,
                     font_size=25, bold=True, anchor_x="left")
    arcade.draw_text("I for Instructions", WIDTH/2, HEIGHT/2 - 90, arcade.color.WHITE,
                     font_size=25, bold=True, anchor_x="left")
    arcade.draw_text("ESC to End Game", WIDTH/2, HEIGHT/2 - 130, arcade.color.WHITE,
                     font_size=25, bold=True, anchor_x="left")

def instructions():
    arcade.set_background_color(arcade.color.BLACK)
    arcade.draw_text("How To Play", 20, HEIGHT - 50, arcade.color.WHITE,
                     font_size=30, bold= True, anchor_x="left")
    arcade.draw_text("""Your goal is to make it to the end without losing all your lives by 
avoiding the spikes and pitfalls.

Use the Left and Right arrow keys to move, and space bar to jump.
To end the game and return to menu, press the ESC button.""",
                     20, HEIGHT - 100, arcade.color.WHITE, font_size=15, anchor_x="left")

def game_screen1():
    global current_screen
    global player_x, player_y, player_width, player_height
    global on_ground

    arcade.set_background_color(arcade.color.WHITE_SMOKE)

    # Player
    arcade.draw_ellipse_filled(player_x, player_y, player_width, player_height,
                               arcade.color.YELLOW)

    # Ground
    arcade.draw_xywh_rectangle_filled(ground_rect_x1, ground_rect_y1,
                                      ground_rect_width1, ground_rect_height1,
                                      arcade.color.DARK_BROWN)

    # Check if Player is on Ground
    if player_y - player_height == ground_rect_y1 + ground_rect_height1:
        on_ground = True
    else:
        on_ground = False

    print(on_ground)


    # Spikes - sage colour
    # arcade.draw_triangle_filled()

    # Next screen
    if player_x >= 750:
        current_screen = game_screen2()


def game_screen2():
    global current_screen
    global player_x, player_y, player_width, player_height
    global on_ground

    arcade.set_background_color(arcade.color.WHITE_SMOKE)

    # Player
    arcade.draw_ellipse_filled(player_x, player_y, player_width, player_height,
                               arcade.color.YELLOW)

    # Ground
    # arcade.draw_xywh_rectangle_filled()

    # Platforms
    # arcade.draw_xywh_rectangle_filled()
    

    # Check if Player is on Ground
    if player_y - player_height == ground_rect_y1 + ground_rect_height1:
        on_ground = True
    else:
        on_ground = False

    print(on_ground)


    # Spikes - sage colour
    # arcade.draw_triangle_filled()

    # Next screen
    if player_x >= 750:
        current_screen = game_screen3()

def game_screen3():
    pass



if __name__ == '__main__':
    setup()
